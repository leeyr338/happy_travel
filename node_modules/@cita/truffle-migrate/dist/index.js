#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var deploy_1 = require("./deploy");
var Web3 = require("cita-web3");
var contract_utils_1 = require("./contract_utils");
var __root = process.cwd();
var rootPathOf = function (filePath) {
    var rootPath = __root;
    var p = path.resolve(rootPath, filePath);
    return p;
};
var PathTable = {
    contracts: rootPathOf('./build/contracts'),
    migrations: rootPathOf('./migrations'),
    truffleConfig: rootPathOf('./truffle.js'),
    citaConfig: rootPathOf('./truffle-cita.js'),
};
var dirFilesRequire = function (dir) {
    var p = rootPathOf(dir);
    var files = fs.readdirSync(p);
    var list = [];
    files.forEach(function (file, i) {
        var filePath = path.resolve(p, file);
        var f = require(filePath);
        list.push(f);
    });
    return list;
};
var parsedCommandArgs = function () {
    var argv = process.argv;
    var args = [];
    if (argv.length >= 3) {
        args = argv.splice(2);
    }
    return args;
};
var newProviderWeb3 = function (network) {
    var host = network.host, port = network.port;
    var provider = network.provider;
    if (!provider) {
        var server = "http://" + host + ":" + port + "/";
        provider = new Web3.providers.HttpProvider(server);
    }
    var web3 = new Web3(provider);
    return web3;
};
var parsedWeb3Network = function (args) {
    var p = PathTable.citaConfig;
    var config = require(p);
    var networks = config.networks;
    var network;
    if (args[0] === '--network') {
        network = networks[args[1]];
    }
    else {
        network = networks.development;
    }
    var web3 = newProviderWeb3(network);
    return { web3: web3, network: network };
};
var newDeployer = function (web3, userParams) {
    var deployStart = function (contracsName) { return __awaiter(_this, void 0, void 0, function () {
        var conpath, con, bytecode, abi, info, ins;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    conpath = path.resolve(PathTable.contracts, contracsName);
                    con = require(conpath);
                    bytecode = con.bytecode, abi = con.abi;
                    info = Object.assign({ bytecode: bytecode, abi: abi }, userParams);
                    return [4, deploy_1.default(info, web3)];
                case 1:
                    ins = _a.sent();
                    console.log('address:', ins.address);
                    return [2, ins];
            }
        });
    }); };
    var deployer = {
        deploy: deployStart,
    };
    return deployer;
};
var validParams = function () {
    var userParams = require(PathTable.citaConfig).contractInfo;
    var privkey = userParams.privkey, chainId = userParams.chainId;
    if (privkey === '' || typeof privkey !== 'string') {
        throw '\nplease set your private key as a string, and make sure other people while not get it';
    }
    if (typeof chainId !== 'number') {
        throw '\nplease set your chain id as a number';
    }
    var keyTypeTable = {
        privkey: 'string',
        chainId: 'number',
        nonce: 'string',
        quota: 'number',
        version: 'number',
        validUntilBlock: 'number',
    };
    var validParams = {
        to: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        nonce: contract_utils_1.getRandomInt(),
        quota: 999999,
        validUntilBlock: undefined,
        version: 0,
    };
    var keys = Object.keys(keyTypeTable);
    Object.keys(userParams).forEach(function (key) {
        if (keys.includes(key)) {
            var value = userParams[key];
            if (typeof value === keyTypeTable[key]) {
                validParams[key] = value;
            }
            else {
                throw "\nType Error: [" + key + "] should be a [" + keyTypeTable[key] + "]";
            }
        }
    });
    return validParams;
};
var migrate = function (web3, network) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    var funcs, params, deployer, runAllFunc;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                funcs = dirFilesRequire(PathTable.migrations);
                params = validParams();
                deployer = newDeployer(web3, params);
                runAllFunc = function (web3) { return __awaiter(_this, void 0, void 0, function () {
                    var len, i, func;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                len = funcs.length;
                                i = 0;
                                _a.label = 1;
                            case 1:
                                if (!(i < len)) return [3, 4];
                                func = funcs[i];
                                return [4, func(deployer, network)];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3:
                                i++;
                                return [3, 1];
                            case 4: return [2];
                        }
                    });
                }); };
                return [4, runAllFunc(web3)];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
var main = function () {
    var args = parsedCommandArgs();
    var _a = parsedWeb3Network(args), web3 = _a.web3, network = _a.network;
    migrate(web3, network);
};
main();
//# sourceMappingURL=index.js.map